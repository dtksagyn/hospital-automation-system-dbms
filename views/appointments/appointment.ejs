<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Appointment</title>
  <!-- Bootstrap CSS -->
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <!-- DESIGN -->
  <style>
    @import url("https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap");


    body {
      user-select: none;
      overflow-y: scroll;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }

    .background {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100vh;
      background: url(https://img.freepik.com/free-photo/young-handsome-physician-medical-robe-with-stethoscope_1303-17818.jpg?t=st=1714303911~exp=1714307511~hmac=33a3f47981d4c820a78a6ec82f3e7264a411c5917260ccbd3cffeff18b6a8f00&w=996) no-repeat center;
      background-size: cover;
      filter: blur(6px);
    }

    .appointment-container {
      padding: 25px 30px;
      color: #023047;
      max-width: 600px;
      margin: 50px auto;
      padding: 30px;
      border-radius: 40px;
      box-shadow: 0 0 10px rgba(33, 151, 188, 0.4);
      background-color: rgba(255, 255, 255, 0.6);
      overflow: auto;
      position: relative;
    }


    .form-group {
      padding: 2px;
      border-radius: 30px;
    }

    .form-group input {
      border-radius: 30px;
    }

    .form-group select {
      border-radius: 30px;
    }

    .btn {
      background-color: #219EBC;
      border-radius: 20px;
      border-color: transparent;
    }

    .btn-selected {
      background-color: transparent;
      color: #219EBC;
      border: 2px solid #219EBC;
    }


    .btn-selected:focus {
      background-color: #219EBC;
      color: #fbfbfb;
      box-shadow: 0 0 0 0.2rem;
    }

    .date-navigation .btn {
      background-color: #219EBC;
      color: #fff;
    }

    .times-grid {
      margin-top: 0px;
      overflow: auto;
      max-height: 200px;
    }

    .btn:hover {

      background-color: transparent;
      color: #219EBC;
      border: 2px solid #219EBC;
    }

    .header_section {
      padding: 15px 0;
      position: fixed;
      top:0;
      left:20px;
    }

    .navbar-brand span {
      font-weight: bold;
      font-size: 24px;
      color: #023047;
      text-transform: uppercase;
    }

  </style>

  <!-- END DESIGN -->
</head>

<body>
  <div class="background"></div>
  <header class="header_section">
    <nav class="navbar navbar-expand-lg custom_nav-container ">
      <a class="navbar-brand" href="index.html">
        <span>
          CareMed
        </span>
      </a>
    </nav>
  </header>
  <div class="appointment-container">
    <div class="title">
      <h2 class="mb-4"> Make an Appointment</h2>
    </div>
    <div class="tire"></div>
    <form action="/appointments" method="post">
      <div class="form-group">
        <label for="ssn">Social Security Number</label>
        <input type="text" placeholder="Enter your SSN" class="form-control" id="ssn" name="ssn" required>
      </div>
      <div class="form-group">
        <label for="firstName">First Name</label>
        <input type="text" placeholder="Enter your first name" class="form-control" id="firstName" name="firstName"
          required>
      </div>
      <div class="form-group">
        <label for="lastName">Last Name</label>
        <input type="text" placeholder="Enter your last name" class="form-control" id="lastName" name="lastName"
          required>
      </div>
      <div class="form-group">
        <label for="department">Department</label>
        <select class="form-control" id="department" name="departmentId" required>
          <option value="">Select department</option>
        </select>
      </div>
      <div class="form-group">
        <label for="doctor">Doctor</label>
        <select class="form-control" id="doctor" name="doctorId" required>
          <option value="">Select doctor</option>

        </select>
      </div>
      <div class="form-group">
        <div class="date-navigation row justify-content-center">
          <button type="button" id="prevDate" class="btn btn-primary">&lt;</button>
          <h3 id="currentDate" class="mx-3"></h3>
          <button type="button" id="nextDate" class="btn btn-primary">&gt;</button>
        </div>
      </div>
      <div class="form-group">
        <label for="time">Time</label>
        <div id="timesGrid" class="times-grid">
          <!-- Appointment times will be populated here -->
        </div>
        <input type="hidden" id="time" name="time"> <!-- Hidden input field to store selected time -->
        <input type="hidden" id="date" name="date"> <!-- Hidden input field to store selected time -->
      </div>
      <div class="btn_1"><button type="submit" class="btn btn-primary btn-block">Make Appointment</button></div>


    </form>
  </div>
  <!-- Bootstrap JS -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

  <script>

    // Define variables
    const departmentInput = document.getElementById('department');
    const doctorInput = document.getElementById('doctor');
    const prevDateBtn = document.getElementById('prevDate');
    const nextDateBtn = document.getElementById('nextDate');
    const currentDateDisplay = document.getElementById('currentDate');
    let currentDate = new Date();

    // Disable input fields
    function disableInput() {
      doctorInput.disabled = true;
      prevDateBtn.disabled = true;
      nextDateBtn.disabled = true;
    }

    // Fetch departments and populate dropdown
    function setDepartments() {
      fetch('/departments')
        .then(response => response.json())
        .then(departments => {
          departments.forEach(department => {
            const option = document.createElement('option');
            option.value = department.departmentId;
            option.textContent = department.departmentName;
            departmentInput.appendChild(option)
          });
        })
        .catch(error => {
          console.error('Error fetching departments:', error);
        });
    }

    // Fetch doctors for selected department and populate dropdown
    function setDoctors(departmentId) {
      fetch(`/doctors/department/${departmentId}`)
        .then(response => response.json())
        .then(doctors => {
          doctors.forEach(doctor => {
            const option = document.createElement('option');
            option.value = doctor.doctorId;
            option.textContent = `${doctor.firstName} ${doctor.lastName}`;
            doctorInput.appendChild(option);
          });
          doctorInput.disabled = false;
        })
        .catch(error => {
          console.error('Error fetching doctors:', error);
        });
    }

    // Skip weekends when navigating dates
    function skipWeekends(date, direction) {
      const day = date.getDay();
      if ((day === 0 && direction === 'prev') || (day === 6 && direction === 'next')) {
        date.setDate(date.getDate() + (direction === 'prev' ? -2 : 2));
      }
    }

    // Update date display
    function updateDateDisplay() {
      currentDateDisplay.textContent = currentDate.toDateString();
    }

    // Event listeners
    window.onload = function () {
      disableInput();
      setDepartments();
    }

    departmentInput.addEventListener('change', function () {
      const departmentId = this.value;
      while (doctorInput.options.length > 1) {
        doctorInput.remove(doctorInput.options.length - 1);
      }
      if (departmentId) {
        setDoctors(departmentId);
      } else {
        // Clear doctor dropdown and disable it
        doctorInput.innerHTML = '<option value="">Select doctor</option>';
        doctorInput.disabled = true;
        // Clear and disable time grid
        updateTimesGrid([]);
        disableInput();
      }
    });


    doctorInput.addEventListener('change', function () {
      prevDateBtn.disabled = false;
      nextDateBtn.disabled = false;
      currentDate = new Date();
      updateDateDisplay();
      getTimes()
    });


    // Sorry for doing this mess
    function getTimes() {
      const formattedDate = currentDate.toISOString().slice(0, 10);
      fetch(`/appointments/${doctorInput.value}&${formattedDate}`)
        .then(response => response.json())
        .then(fetchedTimes => {
          fetchedTimes = fetchedTimes.map(appointment => appointment.time);
          const availableTimes = [];
          for (let hour = 9; hour < 16; hour++) {
            for (let minute = 0; minute < 60; minute += 30) {
              const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}:00`;
              if (!(hour === 12 && minute === 0)) {
                availableTimes.push(time);
              }
            }
          }
          const filteredTimes = availableTimes.filter(time => !fetchedTimes.includes(time));
          updateTimesGrid(filteredTimes);
        })
        .catch(error => {
          console.error(error);
        });
    }


    function updateTimesGrid(times) {
      const timesGrid = document.getElementById('timesGrid');
      timesGrid.innerHTML = ''; // Clear previous content
      times.forEach(time => {
        const button = document.createElement('button');
        button.type = 'button';
        button.classList.add('btn', 'btn-primary', 'mr-2', 'mb-2');
        button.textContent = time; // Use time as button text
        button.addEventListener('click', function () {
          const selectedTime = document.querySelector('.btn-selected');
          if (selectedTime) {
            selectedTime.classList.remove('btn-selected');
          }
          this.classList.add('btn-selected');
          document.getElementById('time').value = time; // Set selected time in hidden input field
          document.getElementById('date').value = currentDate.toISOString().slice(0, 10);
        });
        timesGrid.appendChild(button);
      });
    }

    prevDateBtn.addEventListener('click', function () {
      const today = new Date();
      if (currentDate <= today) {
        return; // Prevent navigating to dates before or equal to the current date
      }
      currentDate.setDate(currentDate.getDate() - 1);
      skipWeekends(currentDate, 'prev');
      updateDateDisplay();
      getTimes();
    });

    nextDateBtn.addEventListener('click', function () {
      currentDate.setDate(currentDate.getDate() + 1);
      updateDateDisplay();
      getTimes();
    });



  </script>
</body>

</html>